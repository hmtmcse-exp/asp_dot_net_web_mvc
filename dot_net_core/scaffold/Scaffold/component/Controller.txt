using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MiaISoftMasterApp.AppDBContext;
using MiaISoftMasterApp.Controllers.AppCommon;
using MiaISoftMasterApp.Models;
using MiaISoftMasterApp.Services.Common;

namespace MiaISoftMasterApp.Controllers
{
    public class __MODEL_NAME__Controller : BaseController
    {

        public __MODEL_NAME__Controller(MISMasterDBContext context)
        {
            _context = context;  
        }
        
        private async Task<IActionResult> DataForm(int? id, string actionName)
        {
            var dataModel = id == null ? null : await _context.__MODEL_NAME__.SingleOrDefaultAsync(m => m.Id == id);
            if (dataModel == null)
            {
                Notify(false, "Invalid Content.");
                return RedirectToAction("Index");
            }
            switch (actionName)
            {
                case "Details":
                    return View("Details", dataModel);
                case "Edit":
                    return View("Edit", dataModel);
                case "Delete":
                    _context.__MODEL_NAME__.Remove(dataModel);
                    await _context.SaveChangesAsync();
                    Notify(true, organizer.Name + " Deleted.");
                    return RedirectToAction("Index");
                case "DbUpdateConcurrencyException":
                    Notify(false, "The Dataset Changed By Other User, Please Try Again.");
                    break;
            } 
            return RedirectToAction("Index");
        }
        
        
        public async Task<IActionResult> Index()
        {
            var selectedData = from data in _context.__MODEL_NAME__ select data;
            return View(await ReadHelper<__MODEL_NAME__>.listAsync(selectedData.AsNoTracking(), Request.Query));
        }

        
        public IActionResult Create()
        {
            return View();
        }

        public async Task<IActionResult> Details(int? id)
        {
            return await DataForm(id, "Details");
        }

        
        public async Task<IActionResult> Edit(int? id)
        {
            return await DataForm(id, "Edit");
        }
        
        
        public async Task<IActionResult> Delete(int? id)
        {
            return await DataForm(id, "Delete");
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(__MODEL_NAME__ formData)
        {
            if (!ModelState.IsValid) return View(formData);
            _context.Add(formData);
            await _context.SaveChangesAsync();
            Notify(true, "Successfully Created");
            return RedirectToAction("Index");
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, __MODEL_NAME__ formData)
        {
            if (id != formData.Id)
            {
                return NotFound();
            }

            if (!ModelState.IsValid) return View(formData);
            try
            {
                _context.Update(formData);
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                return await DataForm(id, "DbUpdateConcurrencyException");
            }
            return RedirectToAction("Index");
        }

    }
}
